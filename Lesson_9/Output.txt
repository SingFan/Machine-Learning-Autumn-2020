Use tf.where in 2.0, which has the same broadcast rule as np.where
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_1 (Dense)              (None, 400)               314000    
_________________________________________________________________
activation_1 (Activation)    (None, 400)               0         
_________________________________________________________________
dense_2 (Dense)              (None, 10)                4010      
_________________________________________________________________
activation_2 (Activation)    (None, 10)                0         
=================================================================
Total params: 318,010
Trainable params: 318,010
Non-trainable params: 0
_________________________________________________________________
Train on 30000 samples, validate on 30000 samples
Epoch 1/30
30000/30000 [==============================] - 2s 60us/step - loss: 0.3757 - acc: 0.8945 - val_loss: 0.2244 - val_acc: 0.9361
Epoch 2/30
30000/30000 [==============================] - 2s 52us/step - loss: 0.1760 - acc: 0.9488 - val_loss: 0.1579 - val_acc: 0.9548
Epoch 3/30
30000/30000 [==============================] - 2s 51us/step - loss: 0.1215 - acc: 0.9645 - val_loss: 0.1480 - val_acc: 0.9562
Epoch 4/30
30000/30000 [==============================] - 2s 52us/step - loss: 0.0912 - acc: 0.9736 - val_loss: 0.1222 - val_acc: 0.9644
Epoch 5/30
30000/30000 [==============================] - 2s 55us/step - loss: 0.0713 - acc: 0.9803 - val_loss: 0.1122 - val_acc: 0.9668
Epoch 6/30
30000/30000 [==============================] - 2s 57us/step - loss: 0.0557 - acc: 0.9844 - val_loss: 0.1068 - val_acc: 0.9684
Epoch 7/30
30000/30000 [==============================] - 2s 55us/step - loss: 0.0447 - acc: 0.9887 - val_loss: 0.1103 - val_acc: 0.9671
Epoch 8/30
30000/30000 [==============================] - 1s 48us/step - loss: 0.0363 - acc: 0.9907 - val_loss: 0.0997 - val_acc: 0.9708
Epoch 9/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0295 - acc: 0.9937 - val_loss: 0.1019 - val_acc: 0.9704
Epoch 10/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0236 - acc: 0.9948 - val_loss: 0.0971 - val_acc: 0.9714
Epoch 11/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0196 - acc: 0.9963 - val_loss: 0.0981 - val_acc: 0.9712
Epoch 12/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0155 - acc: 0.9975 - val_loss: 0.0950 - val_acc: 0.9726
Epoch 13/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0132 - acc: 0.9982 - val_loss: 0.0992 - val_acc: 0.9722
Epoch 14/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0103 - acc: 0.9988 - val_loss: 0.0980 - val_acc: 0.9727
Epoch 15/30
30000/30000 [==============================] - 2s 51us/step - loss: 0.0087 - acc: 0.9991 - val_loss: 0.0981 - val_acc: 0.9725
Epoch 16/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0070 - acc: 0.9995 - val_loss: 0.0975 - val_acc: 0.9727
Epoch 17/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0058 - acc: 0.9995 - val_loss: 0.1010 - val_acc: 0.9717
Epoch 18/30
30000/30000 [==============================] - 1s 50us/step - loss: 0.0047 - acc: 0.9998 - val_loss: 0.0996 - val_acc: 0.9736
Epoch 19/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0041 - acc: 0.9997 - val_loss: 0.0993 - val_acc: 0.9735
Epoch 20/30
30000/30000 [==============================] - 1s 48us/step - loss: 0.0035 - acc: 0.9998 - val_loss: 0.1017 - val_acc: 0.9730
Epoch 21/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0030 - acc: 0.9999 - val_loss: 0.1007 - val_acc: 0.9734
Epoch 22/30
30000/30000 [==============================] - 1s 48us/step - loss: 0.0026 - acc: 0.9999 - val_loss: 0.1029 - val_acc: 0.9730
Epoch 23/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0022 - acc: 1.0000 - val_loss: 0.1040 - val_acc: 0.9733
Epoch 24/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0019 - acc: 1.0000 - val_loss: 0.1042 - val_acc: 0.9736
Epoch 25/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0018 - acc: 1.0000 - val_loss: 0.1061 - val_acc: 0.9732
Epoch 26/30
30000/30000 [==============================] - 2s 50us/step - loss: 0.0016 - acc: 1.0000 - val_loss: 0.1063 - val_acc: 0.9732
Epoch 27/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0014 - acc: 1.0000 - val_loss: 0.1062 - val_acc: 0.9733
Epoch 28/30
30000/30000 [==============================] - 1s 49us/step - loss: 0.0013 - acc: 1.0000 - val_loss: 0.1065 - val_acc: 0.9731
Epoch 29/30
30000/30000 [==============================] - 2s 50us/step - loss: 0.0012 - acc: 1.0000 - val_loss: 0.1082 - val_acc: 0.9735
Epoch 30/30
30000/30000 [==============================] - 1s 48us/step - loss: 0.0011 - acc: 1.0000 - val_loss: 0.1083 - val_acc: 0.9732


score = model.evaluate(X_test, Y_test, verbose=1)
10000/10000 [==============================] - 0s 14us/step

print('Test accuracy:', score[1])
Test accuracy: 0.9822